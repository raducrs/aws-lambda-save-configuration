#! /bin/bash

# Parse arguments
FUNCTION_NAME="$1"
FOLDER="${2:-.}"

# Create folder
HOME_FOLDER=$FOLDER/$FUNCTION_NAME
mkdir -p $HOME_FOLDER

# Get Function definition
echo 'Retriving function definition'
FUNCT_DEF=$(aws lambda get-function --function-name $FUNCTION_NAME)
echo $FUNCT_DEF
echo $FUNCT_DEF | jq '.' > $HOME_FOLDER/get-function.json

echo 'Retriving function configuration'
FUNCT_CONF=$(aws lambda get-function-configuration --function-name $FUNCTION_NAME)
echo $FUNCT_CONF
echo $FUNCT_CONF | jq '.' > $HOME_FOLDER/get-function-configuration.json

echo 'Retriving function policy'
FUNCT_POLICY=$(aws lambda get-policy --function-name $FUNCTION_NAME)
echo $FUNCT_POLICY
echo $FUNCT_POLICY | jq '.' > $HOME_FOLDER/get-policy.json

echo $FUNCT_POLICY | jq .Policy | jq -r | jq '.' > $HOME_FOLDER/policy.json



# Extract information
NAME=$(echo $FUNCT_DEF | jq -r .Configuration.FunctionName)
RUNTIME=$(echo $FUNCT_DEF | jq -r .Configuration.Runtime)
HANDLER=$(echo $FUNCT_DEF | jq -r .Configuration.Handler)
DESCRIPTION=$(echo $FUNCT_DEF | jq -r .Configuration.Description)
TIMEOUT=$(echo $FUNCT_DEF | jq -r .Configuration.Timeout)
MEMORYSIZE=$(echo $FUNCT_DEF | jq -r .Configuration.MemorySize)
ROLE_NAME_FULL=$(echo $FUNCT_DEF | jq -r .Configuration.Role)
ROLE_NAME=$(printf "%s\n" "â€‹${ROLE_NAME_FULL##*/}")
CODE_URL=$(echo $FUNCT_DEF | jq -r .Code.Location)

echo -e '# '$NAME'\n' > $HOME_FOLDER/README.md
echo -e $DESCRIPTION'\n' >> $HOME_FOLDER/README.md
echo -e '\nRuntime: `'$RUNTIME'` \n\nTimeout(s): '$TIMEOUT'  \n\nMemory(Mb): '$MEMORYSIZE' \n\nHandler: `'$HANDLER'` \n\nRole: `'$ROLE_NAME'`\n' >> $HOME_FOLDER/README.md

echo -e 'Additional policies: \n\n```'  >> $HOME_FOLDER/README.md
echo -e $FUNCT_POLICY | jq .Policy | jq -r | jq '.' | jq -r '.Statement[] | {service: .Principal.Service, action: .Action}' >> $HOME_FOLDER/README.md
echo -e '``` \n\n'  >> $HOME_FOLDER/README.md

echo -e '**Autogenerated**\n\n'  >> $HOME_FOLDER/README.md

function download {
    url=$1
    filename=$2

    if [ -x "$(which wget)" ] ; then
        wget -q $url -O $2
    elif [ -x "$(which curl)" ]; then
        curl -o $2 -sfL $url
    else
        echo "Could not find curl or wget, please install one." >&2
    fi
}

echo 'Downloading code to temporary location'
download $CODE_URL temp.zip

echo 'Extracting code'
if [ -x "$(which unzip)" ] ; then
   unzip -o -d $HOME_FOLDER temp.zip 
else
   echo "Could not find unzip" >&2
fi
rm temp.zip

